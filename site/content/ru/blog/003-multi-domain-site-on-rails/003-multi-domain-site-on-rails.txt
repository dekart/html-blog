  <p>Однажды понял, что я делаю под свои нужды достаточно много однотипных сайтов. Причем большинство доработок для каждого сайта носят исключительно косметический характер, непосредственно логика меняется редко и сразу для всех. Однако, меня очень сильно напрягает содержание большого количества копий одного и того же кода и его своевременное обновление. В итоге получается ситуация, что чем древнее проект, тем старее в нем версия кода и тем сложнее его поддерживать (с обратной совместимостью кода несколько сложновато). Плюс ко всему, везде разные административные интерфейсы, т.к. они эволюционируют быстрее всего. </p>

<p>В итоге у меня сформировались следующие пожелания к решению проблемы:</p>

<ol>
<li>Программный комплекс, который может поддерживать неограниченное количество однотипных сайтов</li>
<li>Настраиваемый внешний вид для каждого сайта</li>
<li>Настраиваемый внешний вид для групп сайтов (скины)</li>
<li>Общий программный код</li>
<li>Единый хостинг и сервер (жадный я на выделение памяти под дополнительные монгрелы)</li>
</ol>

<p>На ранних стадиях обдумывания этой идеи я наткнулся на фактически готовое решение: <a href="http://cwilliams.textdriven.com/articles/2005/07/25/productize-your-rails-app">Productize your Rails App</a>. Однако, по ряду причин оно мне не подошло. В частности, из-за того, что в тот момент я совершенно не представлял, как Rails выглядит изнутри и что он может. Это решение было сформировано в виде плагина (сейчас уж не найти его), однако с выходом Rails 1.0 плагин перестал работать, а автор забил болт и чинить не стал.</p>

<p>На дворе 2007 год, а плагина, реализующего нужный мне функционал, так и не видать. Идея, тем не менее, меня не оставляла и горела все сильнее. Опыта я уже достаточно набрался, понимания принципов Rails тоже, поэтому однажды сел и склеил таки небольшой плагин. Собственно, его и хочу продемонстрировать.</p>

<p>Скачивать отсюда: <a id="p139" href="http://www.html-blog.ru/assets/2007/3/29/multidomain.zip">http://www.html-blog.ru/assets/2007/3/29/multidomain.zip</a></p>

<p><strong>Установка</strong></p>

<ol>
<li>Скопируйте плагин в папку vendor/plugins</li>

<li><p>Создайте модель Domains:</p>

<pre><code>def self.up
  create_table :domains do |t|
    t.column :host, :string
    t.column :default, :boolean, :default =&gt; false
    t.column :theme, :string, :limit =&gt; 20
  end
end


def self.down
  drop_table :domains
end
</code></pre></li>
<li><p>Добавьте хотя бы один домен в базу</p>

<pre><code>Domain.create!(:host =&gt; "localhost", :default =&gt; true)

</code></pre>

<p>Это домен по умолчанию. В том случае, если запросу не соответствует ни один домен из базы, будет выбран этот домен.</p></li>
<li><p>Создайте папки app/domains и app/themes, в них будут храниться файлы шаблонов для конкретных доменов и для скинов</p></li>
</ol>

<p><strong>Использование</strong></p>

<p>При подключении плагин добавляет before_filter, который определяет текущий домен. Для этого домена используются соответствующие ему шаблоны из папки , а так же из папки .</p>

<p>Поиск осуществляется в следующем порядке:</p>

<ol>
<li>в папке app/domains/#{current_domain.host}</li>
<li>если шаблон не найден, но задан скин для домена - в папке app/themes/#{current_domain.theme}</li>
<li>если ни в папке домена, ни в папке скина шаблон не найден - в стандартной папке app/views</li>
</ol>

<p><strong>Где может пригодится</strong></p>

<p>Вы можете использвать этот плагин в проектах, которые требуют наличия нескольких доменов, подключенных к одному приложению. В частности, можно использвать это для организации поддоменов для различных разделов сайта, разделения аккаунтов по поддоменам или доменам (блоги, например), порталы.</p>

<p><strong>Будьте внимательны</strong></p>

<ol>
<li>Префикс www перед хостом убирается, домен с www и без обрабатывается одинаково (на мой взгляд, использование www - это скорее дань истории, нежели прямая необходимость)</li>
<li>Плагин не делает различий между доменами второго, третьего и любого другого уровней. Хост нужно задавать целиком, исключая префикс www</li>
<li>Постраничное кэширование через caches_page сохраняет сгенерированные страницы в папку public/#{current_domain.host} 
Пока я бы не рекоммендовал использовать плагин в проектах, применяющих постраничное кэширование. О применении плагина в этом ракурсе я расскажу чуть позже.</li>
<li>Плагин пока что живет без тестов.</li>
<li><b>Для тех кто в trunk'е</b>: недавно был принят <a href="http://dev.rubyonrails.org/ticket/2754">патч</a>, который ходит где-то рядом с функционалом плагина. Я в ближайшие дни обновлюсь и адаптирую к последней версии Rails. На версии 1.2 работает корректно.</li>
</ol>
