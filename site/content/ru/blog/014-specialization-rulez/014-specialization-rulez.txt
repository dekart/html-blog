  <p>В процессе изучения <a href="/2007/4/6/qooxdoo-0-7-alpha2">Qooxdoo 0.7 alpha2</a> и первых пробах новой системы построения классов, я пришел к, казалось бы, тривиальному, но тем не менее важному выводу. Важному для меня, в первую очередь, не как для программиста, а как для проектировщика и руководителя проектов. А вывод этот такой: при создании сложных клиент-серверных приложений (и, в частности, <strong>AJAX</strong>-приложений) нужно четко разделять обязанности по проектированию серверной и клиентской частей проекта. Вплоть до делегирования этих обязанностей различным разработчикам</p>

<p>К этому выводу я пршел после того, как попробовал соорудить в <strong>Qooxdoo</strong> простейшее приложение с несколькими закладками, списком и событиями. Ничего сложного, я делал это и раньше, однако&#8230; Что-то мешало мне нормально работать. Немного поразмыслив, я пришел к выводу что есть ряд сложностей, возникающих при переключении с разработки приложений, управляемых сервером (например, с помощью RJS-шаблонов), на независимые <strong>JavaScript</strong>-приложения, общяющиеся с сервером:</p>

<ol>
<li><p><strong>JavaScript</strong> - это не <strong>Ruby</strong>. Не хватает гибкости, интуитивности, послаблений в синтаксисе. Эти чертовы точки с запятой меня достали, ей богу :) Я все время про них забываю. Не хватает маленьких вкусностей любимого языка. Наиболее критичные функции, которых нет в стандартном <strong>JavaScript</strong>, в <strong>Qooxdoo</strong> уже добавлены, однако, как оказалось, найти их - тоже дело весьма нетривиальное. Да и вообще, переключаться на новый язык оказалось весьма сложно. А уж если бы пришлось делать одновременно и клиентскую часть, и серверную - был бы вообще ад. Один раз я пробовал - ничего хорошего не получается. Разработка движется со скоростью улитки. </p></li>
<li><p>Серверная идеология работы существенно отличается от клиентской. Работа клиентского приложения - это непрерывный поток, в то время как серверного - отдельные четко ограниченные запросы. На клиенте нужно все время где-то хранить переменные, помнить что во что встроено и что куда подключено, ловить события и реагировать, держать в голове нелинейную и асинхронную природу разрабатываемого приложения. Думать о том, что в любой момент времени может идти запрос к серверу, думать об очередях запросов, об обновлениях таблиц&#8230; Короче, безумная мешанина логики и графических спецэффектов :) В итоге выглядит красиво, но в процессе разработки голову можно сломать.</p></li>

<li><p>На клиенте приходится бороться за совместимость с браузерами. В <strong>Qooxdoo</strong> это не так уж сильно чувствуется - фреймворк вполне зрелый и старательно затушевывает раличия. А вот при попытке сделать что-то более-менее комплексное на библиотеках попроще (<a href="http://prototypejs.org">Prototype</a>, например) - можно программирование возненавидеть в принципе. Если ты серверный программист - ты помнишь про скорость работы, использование памяти и транзакции в базе данных. Если клиентский - нужно задумываться что и куда поползет в IE, чего не умеет Opera и где от души перестарается Firefox. Совершенно разные, я бы сказал, интеллектуальные ориентации.</p></li>
</ol>

<p>Подумав на эту тему, я пришел к выводу, что при разработке <strong>AJAX</strong>-интерфейсов высокого уровня лучше разделять клиентскую и серверную часть на две независимые разработки, стыкующиеся между собой некоей спецификацией обмена данными. В этом случае возникает ряд плюсов, которые, на мой взгляд, вполне способны скомпенсировать дополнительные затраты на составление спецификаций и менеджмент двух проектов вместо одного. </p>

<ol>
<li><p>Каждый разработчик занимается своим делом. Специализация рулит - это давно известный факт. Если человек может сосредоточиться на работе с данными на сервере, не задумываясь при этом об интерфейсе - он сможет многое сделать для увеличения скорости и удобства получения этих данных. В свою очередь человек, знающий где ему получить нужный набор данных и не задумывающийся, каким образом он формируется, может гораздо эффективнее проработать интерфейс для работы с полученной информацией.</p></li>

<li><p>Разработчику не нужно переключаться между языками. Это реально сложно. Клиентские и серверные языки сильно отличаются, т.к. решают разные задачи. При работе одновременно на двух языках существенно снижается продуктивность. Чем меньше сущностей приходится держать в голове, тем проще с ними работать. </p></li>
<li><p>У проекта появляется дополнительная спецификация. Это всегда полезно. Это необходимо при командной разработке сложных систем. Если серверные разработчики знают, что им нужно отдать, а клиентские знают, что они получат, существенно снижается вероятность неправильного понимания сути процесса.</p></li>
<li><p>Клиентская часть может быть безболезненно отделена от сервера. Например, если вы по какой-то причине захотите, чтобы приложение могло работать на другой серверной платформе - вам достаточно переписать только серверный функционал без переделки клиентской части. Равно как и наоборот. Например, можно поставлять два варианта интерфейса - <strong>AJAX</strong> и <strong>Flex</strong>. Потребитель сам выбирает что ему больше нравится.</p></li>
<li><p>Серверная часть рождается с API. Фактически, она и представляет собой чистый API, который можно отдавать сторонним разработчикам. Можно объединить несколько клиентских приложений на одной серверной платформе.</p></li>
<li><p>Клиентская часть может быть использована с несколькими серверными приложениями. Согласитесь, такой вариант весьма хорош в том случае, если вы поставляете несколько взаимосвязанных продуктов. Вы можете предоставить потребителю возможность работать со всеми своими инструментами (и даже со сторонними сервисами) прямо из одного окна. </p></li>
</ol>

<p>В общем, я думаю, суть моих размышлений ясна. Сумбурно, но вроде все верно.</p>
