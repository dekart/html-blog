  <p>Если вы следите за событиями в Rails-мире, то уже наверняка прочитали статью <a href="http://www.oreillynet.com/ruby/blog/2007/09/7_reasons_i_switched_back_to_p_1.html">7 reasons I switched back to PHP after 2 years on Rails</a>. Если не прочитали - обязательно прочтите. Причем желательно осилить хотя бы часть коментариев, чтобы увидеть, как разные представители нашего разношерстного веб-девелоперского сообщества прореагировали на эту статью. Статей, в которых рельсы упоминаются в негативном свете, не так уж много, поэтому заварушка получилась та еще.</p>

<p>Все бы ничего, я бы и не обратил на эту статью ваше внимание, если бы знакомые PHP-шники не начали мне ею злорадно тыкать в морду, как грязной тряпкой. Мол, зацени каковы твои рельсы! Чувак-то забил! Послал он твои рельсы! Мне, честное слово, неприятна такая постанова, поэтому я поясню свою позицию по этому вопросу. </p>

<p>А позиция моя такова: замените в статье слово <strong>PHP</strong> на, к примеру, <strong>Perl</strong> или <strong>Java</strong>, а <strong>Rails</strong> на <strong>ASP.NET</strong> или <strong>Python</strong> - и ничего не изменится. Суть проблемы останется точно та же самая. А именно - человек выбрал технологию, не особо вникая в ее суть, предназначение и методики использования. А потом вместе с нанятым мега-спецом взялся гнуть эту технологию под свою задачу. При этом постоянно нагружая спеца всякой посторонней работой. И, что самое страшное, эта задача уже была реализована в рамках другой технологической платформы, а на новую фактически просто переписывалась &#8220;1 в 1&#8221;. И естесственно, проект провалился.</p>

<p>В технологическом мире не бывает &#8220;серебряных пуль&#8221;. Рельсы не исключение. Рельсы - это фреймворк, и как каждый фреймворк они имеют вполне четкую архитектуру и методику использования. И круг задач, для которых этот фреймворк можно использовать. Попытка вывести рельсы за ту область, под которую они заточены, вызывает весьма существенное сопротивление. Чем сильнее выход за границы области, тем больше сопротивление, тем больше кода переписывать. Что мы имеем в этом случае? Чем сильнее мы пытаемся &#8220;нагнуть&#8221; рельсы в сторону уже имеющейся PHP-шной реализации, тем сложнее это сделать. Попытка переписать проект 1 в 1 больше всего похожа на переписывание рельс наново под конкретную задачу. А это бред.</p>

<p>Если вы решили переписать существующий проект на другую платформу, то не нужно это делать 1 в 1. Это не имеет смысла. Зачем вам та же самая фигня, но на другом языке? Перенос на другую платформу должен быть осмыслен с точки зрения получения выгод. Тот же самый код на другом языке - это не выгода. Поэтому переработку надо начинать с того, что можно и нужно улучшить в проекте. Умещается ли это в рамки той технологии, которую вы выбрали на будущее? Насколько легко это будет реализовать, используя новую технологию? Насколько тяжело это будет реализовать на существующей технологии?  Возможно, есть еще и третья технология, на которой все будет еще быстрее и проще?</p>

<p>Даже если сумма получаемых выгод покрывает трудности перехода на новую технологию, не стоит сломя голову бросаться на амбразуру, выкидывать старый код и колбасить новый. Технологию нужно опробовать. Не просто поиграться, осилив десяток примеров из наиболее популярных <strong>User&#8217;s Guide</strong>, а именно опробовать в своем собственном окружении. Попробовать ее внедрить на каком-нибудь не сильно критичном участке собственного проекта. Если все идет хорошо - внедрить ее на следующем участке. И так далее. Новая технология должна внедряться поэтапно. Нельзя в раз заменить весь софт на серверах и поменять сами сервера. Нельзя чтобы однажды утром десятки сотрудников пришли на работу и увидели вместо привычной рабочей среды нечто совершенно новое. Это саботаж собственного проекта.</p>

<p>Автор статьи как раз и сделал эту ошибку - попробовал переписать все на непроверенную им лично технологию, поминутно &#8220;нагибая&#8221; ее под старую реализацию. И в конце концов, сделал вывод, что реализовать новое в его условиях проще на старой технологии. Если бы даже он довел дело до конца, его проблемы на этом бы не кончились. Начались бы косяки с внедрением, с переобучением сотрудников, с дальнейшей поддержкой. Так что чувак еще не сильно поздно спохватился. </p>

<p>Кто не делает ошибок, тот не учится.</p>

