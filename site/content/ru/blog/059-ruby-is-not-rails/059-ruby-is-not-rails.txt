  <p>Мне хоть и нравятся <a href="http://rubyonrails.com">рельсы</a>, но все же я не позволяю себе забывать, что мир Ruby-фреймворков не ограничивается только Rails. Поэтому не забываю следить за жизнью и других фреймворков, чего и вам желаю. Вот они:</p>

<ul>

<li><p><a href="http://merb.rubyforge.org/files/README.html"><strong>Merb</strong></a><br />
Пожалуй, наиболее продвинутый из альтернативных фреймворков в плане функционала. Из особенностей можно отметить фактически полную независимость от ORM - можно использовать на выбор <strong>ActiveRecord</strong>, <a href="http://datamapper.org/">DataMapper</a> или <a href="http://sequel.rubyforge.org/files/sequel/README.html">Sequel</a> (про последний рекомендую почитать Константина Тумалевича - <a href="http://tumalevich.pp.ru/2008/2/26/100">ссылка раз</a>, <a href="http://tumalevich.pp.ru/2008/3/11/105">ссылка два</a>). Удобен для реализации веб-сервисов или небольших сайтов, требовательных к нагрузке. Полезное чтиво: <a href="http://codingbitch.com/p/comboy/merb%20+%20datamapper%20+%20noob:%20quick%20start">merb + datamapper + noob: quick start</a></p></li>

<li><p><a href="http://camping.rubyforge.org/files/README.html"><strong>Camping</strong></a> <br />
Еще более компактный и легковесный, чем <strong>Merb</strong>, однако по-прежнему динамический. Что меня смущает, так это разметка шаблонов (views) с помощью <a href="http://markaby.rubyforge.org/">Markaby</a>. Я понимаю, что программисты в большинстве своем - перфекционисты. Однако простому верстальщику от этого не легче.</p></li>
<li><p><a href="http://www.mackframework.com/"><strong>Mack</strong></a> <br />
Тоже вполне себе легковесный, вышел . Из преимуществ - использует <a href="http://rack.rubyforge.org/">Rack</a> и <a href="http://code.macournoyer.com/thin/">Thin</a>, что дает существенный потенциал в плане производительности. <strong>Thin</strong> мы недавно начали использовать в production и о нем тоже стоит написать отдельную заметку. Напомните мне плиз :)</p></li>

<li><p><a href="http://ramaze.net/"><strong>Ramaze</strong></a> <br />
В принципе похож на предыдущие, но с одним отличием - в качестве шаблонизатора используется собственный движок под названием <strong>Ezamar</strong> (другие движки тоже поддерживаются), позволяющий создавать собственные теги. Принцип схож с движком <a href="http://radius.rubyforge.org/">Radius</a>, который используется в Radiant CMS.</p></li>
<li><p><a href="http://webby.rubyforge.org/"><strong>Webby</strong></a><br />
Относится скорее к семейству микро-CMS, т.к. фактически генерирует статичные HTML-страницы. Из удобств - одновременная поддержка шаблонов Erb, Textile, Markdown и Haml. Плюс позволяет сделать подсветку синтаксиса с помощью библиотеки <strong>CodeRay</strong> (ссылку не даю, т.к. сайт лежит), визуализацию диаграмм с помощью <a href="http://www.graphviz.org/">Graphviz</a> и запуск демона для автоматической генерации статики при внесении изменений. </p></li>

<li><p><a href="http://sinatra.rubyforge.org/"><strong>Sinatra</strong></a><br />
Динамический фреймворк, очень легковесный, не завязан на ORM. Фактически, представляет из себя просто обертку для разбора урлов и отдачи сгенерированного контента. Можно использовать <strong>ERB</strong> и <a href="http://haml.hamptoncatlin.com/">HAML</a>, однако код шаблонов пишется прямо в контроллере, что на мой взгляд есть признак дурного вкуса.</p></li>
<li><p><a href="http://staticmatic.rubyforge.org/"><strong>StaticMatic</strong></a><br />
Библиотека для генерации статичных сайтов, о ней я уже <a href="http://www.html-blog.ru/2008/1/4/playing-with-staticmatic">писал</a>. В принципе годится для создания простеньких сайтов с десятком страниц, весьма удобна в использовании. Разметка делается с помощью <a href="http://haml.hamptoncatlin.com/">HAML</a>.</p></li>

<li><p><a href="http://nanoc.stoneship.org/"><strong>Nanoc</strong></a><br />
Очень похоже на <strong>StaticMatic</strong>, но с одним существенным отличием - информация хранится отдельно от представления. Кроме того, в <strong>nanoc</strong> можно использовать БД для хранения данных, что является весьма интересным преимуществом.</p></li>
<li><p><a href="http://rubywaves.com/"><strong>Waves</strong></a><br />
Появился на сцене совсем недавно, динамический, использует <strong>Rack</strong>, <strong>Sequel</strong> и все такое. На мой взгляд, просто переизобретение трехколесного велосипеда на солнечных батарейках. Слишком много кода для реализации слишком простых вещей.</p></li>

<li><p><a href="http://halcyon.rubyforge.org/"><strong>Halcyon</strong></a><br />
Фреймворк включает в себя сервер и клиент для обмена информацией в формате JSON. Фактически можно использовать для обмена информацией между серверами (можно даже на разных платформах).</p></li>
<li><p><a href="http://www.nitroproject.org/"><strong>Nitro</strong></a><br />
Пожалуй, это самая темная из всех вышеперечисленных лошадок. По масштабам этот фреймворк сравним, пожалуй, с <strong>Merb</strong>, однако существующая документация дает весьма размытую картинку происходящего. Ясно следующее: это динамический фреймворк, использующий собственную ORM под названием <strong>Og</strong>, обработчик шаблонов с возможностью создания собственных тегов, встроенную систему локализации, скаффолдинг и кэширование. Специально для пытливых умов есть серия <a href="http://oxywtf.de/tutorials">хитрых tutorial&#8217;ов</a>, оставляющих вопросов больше, чем ответов.</p></li>
</ul>

<p>Некоторые из них весьма специфичны, как например <strong>Halcyon</strong>, не все годятся для создания динамических сайтов. Однако каждый из них можно применить в том или ином круге задач, в которых рельсы будут просто-напросто излишни.</p>

